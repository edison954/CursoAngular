Instalar 
    nodejs 
        node -v
        npm -v

    typescript:
        npm install -g typescript
        tsc --version

    angular cli
        npm install -g @angular/cli

    ionic
        npm install -g @ionic/cli

    git
        git config --global user.name = "Edison"
        git config --global user.email edison@gmail.com

-----------
compilar archivo .ts de typescript (app.ts)
    tsc app.ts          --> genera archivo app.js compilado

crear archivo de configuracion typescript
    tsc --init

modo watch en typescript
    tsc -w


-templates literales ``, parametros obligatorios, opcionales y por defecto

  function activar(
    quien: string,
    momento?: string,
    objeto: string = "batiseñal"
  ) {
    if (momento) {
      console.log(`${quien} activó la ${objeto} en la ${momento}`);
    } else {
      console.log(`${quien} activó la ${objeto}.`);
    }
  }


FUNCION FLECHA 

  const miFuncion = function (a: string) {
    return a.toUpperCase();
  };
  // function funcion2(a: string) {
  //   return a;
  // }
  const miFuncionF = (a: string) => {
    return a.toUpperCase();
  };

  const miFuncionF1 = (a: string) => a.toUpperCase();

  console.log(miFuncion("normal"));
  console.log(miFuncionF("flecha"));
  console.log(miFuncionF1("flecha1"));

DESESTRUCTURACION DE OBJETOS

  const avanger = {
    nombre: "Steve",
    clave: "Capitán América",
    poder: "Droga",
  };

  console.log(avanger.nombre);
  console.log(avanger.clave);
  console.log(avanger.poder);

  // Desestructuracion de objetos

  const { nombre, clave, poder } = avanger;

  console.log(nombre);
  console.log(clave);
  console.log(poder);

DESESTRUCTURACION COMO ARGUMENTO

  const extraer = ({ nombre, clave, poder }: any) => {
    //const { nombre, clave, poder } = avanger;

    console.log(nombre);
    console.log(clave);
    console.log(poder);
  };

  extraer(avanger);

CLASES

  class Avanger {
    // nombre: string;
    // equipo: string;
    // nombreReal?: string;
    // puedePelear: boolean;
    // peleasGanadas: number;

    constructor(
      public equipo: string,
      public nombre: string,
      public nombreReal?: string,
      public puedePelear: boolean = true,
      public peleasGanadas: number = 0
    ) {}
  }

  //const antman: Avanger = new Avanger();
  const antman = new Avanger("Antman", "Capi");
  console.log(antman);


TYPESCRIPT-IMPORTER
cd typescript-IMPORTER
npm install

--actualizar npm
npm install -g npm


class Xmen {
  constructor(public nombre: string, public clave: string) {}
}


DECORADORES DE CLASES
para añadir funcionalidad a la clase
@algo.   

function imprimirConsola(constructorClase: Function) {
  console.log(constructorClase);
}

@imprimirConsola
export class Xmen {
  constructor(public nombre: string, public clave: string) {}

  imprimir() {
    console.log(`${this.nombre}-${this.clave}`);
  }
}


----ANGULAR (angular.io)

paginas de codigo de ejemplo, para probar codigo
https://plnkr.co/
https://stackblitz.com

ng new myApp

cd myApp
ng serve --open 

Angular puerto 4200 por defecto

ng serve -p 4201

ng serve -o           --> para que abra el navegador por defecto

estructura del proyecto

e2e  (end to end)  pruebas de extremo a extremo 
node_modules      paquetes que installa
src    donde esta nuestra app de angular
.editorconfig   configuraciones del editor
.gitignore    
angular.json  archivo de configuracion de angular.
package-lock-json   le indica a la aplicacion como fue creado el package.json
package.json
RADME.md 
tsconfig.json
tslint.json      ayuda a escribir codigo limpio de js y tsc

src\
  app\
Karma.config.js  ->archivo de configuracion pruebas de Karma
main.js   

bootstrap
  -- getbootstrap.com  /download  y copia el link del cdn

crear componentes por cli
  ng g c components/footer


Directivas estructurales
*ngIf
*ngFor

---------------- SPA
ng new spa 

(seleccionar no para no routing y css)

ng serve -o    --> para iniciar en navegador por defecto

- crear la estructura del proyecto

crear carpetas en app
components\shared

ng g c components/shared/navbar

instalando bootstrap  (3 formas)

1. desde la documentacion de getbootstrap.com  
    /download
    BootstrapCDN  (copiar ruta) pegarlas en index.html en el head
    copiar urls scripts y ponerlos al final del index.html

2.  en la documentacion de bootstrap, Download (de la parte sup) descargando local la libreria
    copiar carpetas css y js  pegarlos en src/assets/libs
    ajustar el index.html
    <link rel="stylesheet" href="./assets/libs/bootstrap/css/bootstrap.min.css">

3.  por node package manager
      npm install bootstrap --save
      npm install jquery --save
      npm install popper.js --save
      ajustar archivo angular.json para cuando ejecute la app, tome las liberrias

crear nvabar, jumbotron

      
ng g c components/heroes -is      --> inline style para que no genere el archivo de estilos

---------------------------routing

app.routes.ts


en app. moduele

// Rutas
import { APP_ROUTING } from "./app.routes";

// Servicios

// Componentes
import { AppComponent } from './app.component';


--------------Servicios
HeroesComponent -> servico heroes  

- Brindar informacion a quien lo necesite
- Realizar peticiones CRUD
- Mantener la data de forma persistente
- Servir como recurso reutilizable para nuestra app

import { Injectable } from '@angular/core';

@Injectable()
export class HeroesService {
    constructor() { }
}


para renderizar la propiedad en el html : 2 formas
1-       <img src="{{heroe.img}}" class="card-img-top" alt="...">
2.     <img [src]="heroe.img" class="card-img-top" alt="...">


crear componente heroe
ng g c components/heroe -is


dos formas de moverse con el router con parametros.. 
con boton 

<button (click)="verHeroe(i)" type="button" class="btn btn-outline-primary btn-block">Ver más...</button>
  verHeroe(idx: number) {
    console.log(idx);
    this.router.navigate(['/heroe', idx]);
  }

con link
<a [routerLink]="['/heroe', i]" class="btn btn-outline-primary"> Ver más link</a>



