Instalar 
    nodejs 
        node -v
        npm -v

    typescript:
        npm install -g typescript
        tsc --version

    angular cli
        npm install -g @angular/cli

    ionic
        npm install -g @ionic/cli

    git
        git config --global user.name = "Edison"
        git config --global user.email edison@gmail.com

-----------
compilar archivo .ts de typescript (app.ts)
    tsc app.ts          --> genera archivo app.js compilado

crear archivo de configuracion typescript
    tsc --init

modo watch en typescript
    tsc -w


-templates literales ``, parametros obligatorios, opcionales y por defecto

  function activar(
    quien: string,
    momento?: string,
    objeto: string = "batiseñal"
  ) {
    if (momento) {
      console.log(`${quien} activó la ${objeto} en la ${momento}`);
    } else {
      console.log(`${quien} activó la ${objeto}.`);
    }
  }


FUNCION FLECHA 

  const miFuncion = function (a: string) {
    return a.toUpperCase();
  };
  // function funcion2(a: string) {
  //   return a;
  // }
  const miFuncionF = (a: string) => {
    return a.toUpperCase();
  };

  const miFuncionF1 = (a: string) => a.toUpperCase();

  console.log(miFuncion("normal"));
  console.log(miFuncionF("flecha"));
  console.log(miFuncionF1("flecha1"));

DESESTRUCTURACION DE OBJETOS

  const avanger = {
    nombre: "Steve",
    clave: "Capitán América",
    poder: "Droga",
  };

  console.log(avanger.nombre);
  console.log(avanger.clave);
  console.log(avanger.poder);

  // Desestructuracion de objetos

  const { nombre, clave, poder } = avanger;

  console.log(nombre);
  console.log(clave);
  console.log(poder);

DESESTRUCTURACION COMO ARGUMENTO

  const extraer = ({ nombre, clave, poder }: any) => {
    //const { nombre, clave, poder } = avanger;

    console.log(nombre);
    console.log(clave);
    console.log(poder);
  };

  extraer(avanger);


