Instalar 
    nodejs 
        node -v
        npm -v

    typescript:
        npm install -g typescript
        tsc --version

    angular cli
        npm install -g @angular/cli

    ionic
        npm install -g @ionic/cli

    git
        git config --global user.name = "Edison"
        git config --global user.email edison@gmail.com

-----------
compilar archivo .ts de typescript (app.ts)
    tsc app.ts          --> genera archivo app.js compilado

crear archivo de configuracion typescript
    tsc --init

modo watch en typescript
    tsc -w


-templates literales ``, parametros obligatorios, opcionales y por defecto

  function activar(
    quien: string,
    momento?: string,
    objeto: string = "batiseñal"
  ) {
    if (momento) {
      console.log(`${quien} activó la ${objeto} en la ${momento}`);
    } else {
      console.log(`${quien} activó la ${objeto}.`);
    }
  }


FUNCION FLECHA 

  const miFuncion = function (a: string) {
    return a.toUpperCase();
  };
  // function funcion2(a: string) {
  //   return a;
  // }
  const miFuncionF = (a: string) => {
    return a.toUpperCase();
  };

  const miFuncionF1 = (a: string) => a.toUpperCase();

  console.log(miFuncion("normal"));
  console.log(miFuncionF("flecha"));
  console.log(miFuncionF1("flecha1"));

DESESTRUCTURACION DE OBJETOS

  const avanger = {
    nombre: "Steve",
    clave: "Capitán América",
    poder: "Droga",
  };

  console.log(avanger.nombre);
  console.log(avanger.clave);
  console.log(avanger.poder);

  // Desestructuracion de objetos

  const { nombre, clave, poder } = avanger;

  console.log(nombre);
  console.log(clave);
  console.log(poder);

DESESTRUCTURACION COMO ARGUMENTO

  const extraer = ({ nombre, clave, poder }: any) => {
    //const { nombre, clave, poder } = avanger;

    console.log(nombre);
    console.log(clave);
    console.log(poder);
  };

  extraer(avanger);

CLASES

  class Avanger {
    // nombre: string;
    // equipo: string;
    // nombreReal?: string;
    // puedePelear: boolean;
    // peleasGanadas: number;

    constructor(
      public equipo: string,
      public nombre: string,
      public nombreReal?: string,
      public puedePelear: boolean = true,
      public peleasGanadas: number = 0
    ) {}
  }

  //const antman: Avanger = new Avanger();
  const antman = new Avanger("Antman", "Capi");
  console.log(antman);


TYPESCRIPT-IMPORTER
cd typescript-IMPORTER
npm install

--actualizar npm
npm install -g npm


class Xmen {
  constructor(public nombre: string, public clave: string) {}
}


DECORADORES DE CLASES
para añadir funcionalidad a la clase
@algo.   

function imprimirConsola(constructorClase: Function) {
  console.log(constructorClase);
}

@imprimirConsola
export class Xmen {
  constructor(public nombre: string, public clave: string) {}

  imprimir() {
    console.log(`${this.nombre}-${this.clave}`);
  }
}


----ANGULAR (angular.io)

paginas de codigo de ejemplo, para probar codigo
https://plnkr.co/
https://stackblitz.com

ng new myApp

cd myApp
ng serve --open 

Angular puerto 4200 por defecto

ng serve -p 4201

ng serve -o           --> para que abra el navegador por defecto

estructura del proyecto

e2e  (end to end)  pruebas de extremo a extremo 
node_modules      paquetes que installa
src    donde esta nuestra app de angular
.editorconfig   configuraciones del editor
.gitignore    
angular.json  archivo de configuracion de angular.
package-lock-json   le indica a la aplicacion como fue creado el package.json
package.json
RADME.md 
tsconfig.json
tslint.json      ayuda a escribir codigo limpio de js y tsc

src\
  app\
Karma.config.js  ->archivo de configuracion pruebas de Karma
main.js   

bootstrap
  -- getbootstrap.com  /download  y copia el link del cdn

crear componentes por cli
  ng g c components/footer


Directivas estructurales
*ngIf
*ngFor

---------------- SPA
ng new spa 

(seleccionar no para no routing y css)

ng serve -o    --> para iniciar en navegador por defecto

- crear la estructura del proyecto

crear carpetas en app
components\shared

ng g c components/shared/navbar

instalando bootstrap  (3 formas)

1. desde la documentacion de getbootstrap.com  
    /download
    BootstrapCDN  (copiar ruta) pegarlas en index.html en el head
    copiar urls scripts y ponerlos al final del index.html

2.  en la documentacion de bootstrap, Download (de la parte sup) descargando local la libreria
    copiar carpetas css y js  pegarlos en src/assets/libs
    ajustar el index.html
    <link rel="stylesheet" href="./assets/libs/bootstrap/css/bootstrap.min.css">

3.  por node package manager
      npm install bootstrap --save
      npm install jquery --save
      npm install popper.js --save
      ajustar archivo angular.json para cuando ejecute la app, tome las liberrias

crear nvabar, jumbotron

      
ng g c components/heroes -is      --> inline style para que no genere el archivo de estilos

---------------------------routing

app.routes.ts


en app. moduele

// Rutas
import { APP_ROUTING } from "./app.routes";

// Servicios

// Componentes
import { AppComponent } from './app.component';


--------------Servicios
HeroesComponent -> servico heroes  

- Brindar informacion a quien lo necesite
- Realizar peticiones CRUD
- Mantener la data de forma persistente
- Servir como recurso reutilizable para nuestra app

import { Injectable } from '@angular/core';

@Injectable()
export class HeroesService {
    constructor() { }
}


para renderizar la propiedad en el html : 2 formas
1-       <img src="{{heroe.img}}" class="card-img-top" alt="...">
2.     <img [src]="heroe.img" class="card-img-top" alt="...">


crear componente heroe
ng g c components/heroe -is


dos formas de moverse con el router con parametros.. 
con boton 

<button (click)="verHeroe(i)" type="button" class="btn btn-outline-primary btn-block">Ver más...</button>
  verHeroe(idx: number) {
    console.log(idx);
    this.router.navigate(['/heroe', idx]);
  }

con link
<a [routerLink]="['/heroe', i]" class="btn btn-outline-primary"> Ver más link</a>


---- recuperar un id de la url (con ActivatedRoute)
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-heroe',
  templateUrl: './heroe.component.html'
})
export class HeroeComponent implements OnInit {

  constructor(
    private activatedRoute: ActivatedRoute
  ) {

    this.activatedRoute.params.subscribe(params => {
      console.log(params);
    });
  }


------pipes
Transforman la data en el template de forma visual (la data no se cambia solo se cambia lo visual)
pipes disponibles

currency
date
uppercase 
json
limitTo
lowercase
async
decimal
percent


ng g c components/buscador -is

comunicacion de un componente padre a un componente hijo y visebersa

ng g c components/heroeTarjeta --spec=false

@inputs  y @outputs

@input  > de un componente padre a un componente hijo
@output > emitir un evento de un componente hijo a un padre (va de la mano  Output, EventEmitter )


Pipes  |   (solo cambio visual)

Siempre reciben un ARGUMENTO
No mutan los argumentos

'edison' | uppercase

Pipes uppercase y lowercase
Pipe Slice
Pice Decimal
Pipe Percent
Pipe Currency
Pipe Json
Pipe Async
Pipe Date
Pipes personalizados
Capitalizar palabras y nombres
Creación de un pipe, que permite cargar recursos externos de forma segura.

nuevo proyecto      -------PIPES

ng new pipes 

ng serve -o

getbootstrap.com  / get starter

poner css en index.html
ajustar clase del body class="container"

poner pipe fecha en español:

ng add @angular/localize

Crear pipe personalizados:

ng g p pipes/capitalizado   ---> para capitalizar un texto

ng g p pipes/domseguro    ---> para retornar una url desde el component.

app de spotify

api de spotify 
https://developer.spotify.com/console/

ng new spotiapp

ir a la pagina 
https://developer.spotify.com/dashboard/
loguearse y generar id

genera el client id y clientsecret

ng serve

crear componentes
ng g c components/home --spec=false -is
ng g c components/search --spec=false -is
ng g c components/artista --spec=false -is
ng g c components/shared/navbar --spec=false -is

api de paises
https://restcountries.eu/

Peticiones http
import { HttpClientModule } from '@angular/common/http';

token para uso del api de spotify

POST https://accounts.spotify.com/api/token
grant_type  client_credentials
client_id
client_secret

para peticiones http se recomienda crear un servicio.

ng g s services/spotify --spec=false

operador map del observable.   (simil a una llave de agua)

permite controlar que tanta informacion quiero recuperar
import { map } from 'rxjs/operators';

pipe para controlar urls de imagenes no existentes

ng g p pipes/noimage --spec=false

crear componente generico de tarjetas
ng g c components/tarjetas --spec=false

crear componente loading generico
ng g c components/shared/loading --spec=false -is    --> sin archivo de pruebas, sin archivo de stilos (inline style)

para iconos
https://fontawesome.com/6?next=%2F
se registra y se pone el script en el index.html

ver artista:
ajuster el app.router
para enviar parametro por la url
import { Router } from '@angular/router';
this.router.navigate(['/artist', artistaId]);

para recibir parametro
import { ActivatedRoute } from '@angular/router';
  constructor(private router: ActivatedRoute) {

    this.router.params.subscribe(params => {
      console.log(params['id']);
    });
  }


reproductir sonido html5
<audio [src]="track.preview_url" controls></audio>

-- Manejo de errores en un observable


  constructor(private spotify: SpotifyService) {
    this.loading = true;
    this.error = false;
    this.spotify.getNewReleases()
      .subscribe((data: any) => {
        this.nuevasCanciones = data;
        this.loading = false;
      }, (errorServicio) => {
        this.loading = false;
        this.error = true;
        console.log(errorServicio.error.error.message);
        this.mensajeError = errorServicio.error.error.message;
      });

  }


  --spotify get token

https://github.com/Klerith/spotify-get-token

curso de node https://fernando-herrera.com/#/curso/node-cero-experto



SECCION DE IONIC
https://ionicframework.com/

app en appstore Ionic DevApp

npm install -g ionic
ionic start myApp
ionic start myApp tabs
ionic start myApp sidemenu

ionic start 05-deseos tabs
cd 05-deseos
ionic serve

localhost:8100

extenciones para vscode
ionic snippets
auto close tag

para iconos que ya vienen instalados con ionic cli
https://ionicons.com/

generar servicio:

ionic g s services/deseos

ionic g s services/deseos --skipTests=true

clg tab  --> console.log()

pagina para agregar
ionic g page pages/agregar

navegar por url
this.router.navigateByUrl('/agregar');

Localstorage
plugin Storage

recuperar id de la url
 const listaId = this.route.snapshot.paramMap.get('listaId');

ngModel
<ion-input type="text"  [(ngModel)]="nombreItem" ></ion-input>

 [(ngModel)]   --> parentecis porque emite un evento, y corchetes porque escucha un evento


 animate
 https://daneden.github.io/animate.css/

 
console.log({ pendientes });  --> ver propiedad y valor en consola

Crear Modulo

ionic g m components          --> genera un modulo
ionic g c components/listas   --> genera un componente dentro del modulo components

PIPE como filtro

ionic g m pipes         -->> crear modulo
ionic g pipe pipes/filtroCompletado     --> crear el pipe

Pipe impuro  --> para que se llame siempre que se detectan cambios

@Pipe({
  name: 'filtroCompletado',
  pure: false
})

@ViewChild()      -->> poder agarrar en el ts un componente o elmento html definido en el .html

@ViewChild(IonList) lista: IonList;

Curso de ionic usando angular
https://www.udemy.com/ionic-ios-android-pwa-appstore-playstore-push/?couponCode=IONIC-ANGULAR-10

ionic play list
https://www.youtube.com/watch?v=RWCb_ARrSxM&list=PLCKuOXG0bPi2EGYmUq7eidFV8A95xTjEx



----------------------------------- nuevo tema, directivas de atributos, ciclo de vida, ngswitch

ng new miselaneos

https://getbootstrap.com/docs/4.5/getting-started/download/
https://jquery.com/download/
tether.io

ajustar angular.json en la parte de scripts y styles

            "styles": [
              "src/styles.css",
              "assets/b4/css/bootstrap.min.css"
            ],
            "scripts": [
              "assets/jquery/jquery-3.5.1.slim.min.js",
              "assets/tether/tether.min.js",
              "assets/b4/js/bootstrap.min.js"
            ],

ng serve

https://fontawesome.com/

ngStyle y su uso con directivas de atributos

ng g c components/ngStyle -it -is    --> template en el mismo archivo, estilos en el mismo archivo


<p [style.fontSize.px]="'40px'">
      Hola mundo... esta es una etiqueta
</p>

aplicar estilos a un componente en particular

ng g c components/css -it -is

NgClass

ng g c components/clases -is


<div [ngClass]="alerta" class="alert" role="alert">
  A simple primary alert—check it out!
</div>

<button type="button" class="btn btn-info" (click)="alerta = 'alert-info'">Info</button>
<button type="button" class="btn btn-success" (click)="alerta = 'alert-success'">Success</button>

<br><br>
<h3 [ngClass]="{'text-danger': propiedades.danger, 'text-info': !propiedades.danger}">
  Hola Mundo
</h3>

<button (click)="propiedades.danger=!propiedades.danger" type="button" class="btn"
  [ngClass]="{'btn-danger': propiedades.danger, 'btn-info':!propiedades.danger}">Cambiar</button>



  prevenir doble click

  
<h3>Proceso Asincrono</h3>

<button (click)="ejecutar()" type="button" class="btn btn-primary" [disabled]="loading">
  <!-- <i class="fa fa-refresh fa-spin"></i> -->
  <i [ngClass]="{'fa-save': !loading, 'fa-refresh fa-spin':loading}" class="fa"></i>
  Guardar cambios
</button>

en ts:

loading: boolean = false;
  ejecutar() {

    this.loading = true;

    setTimeout(() => this.loading = false, 3000);
  }



<button (click)="ejecutar()" type="button" class="btn btn-primary" [disabled]="loading">
  <!-- <i class="fa fa-refresh fa-spin"></i> -->
  <i [ngClass]="{'fa-save': !loading, 'fa-refresh fa-spin':loading}" class="fa"></i>
  <span *ngIf="!loading">Guardar cambios</span>
  <span *ngIf="loading">Espere por favor</span>
</button>


Directivas personalizadas

ng g d directives/resaltado


<hr>
<p [appResaltado]="'blue'">
  Hola Mundo
</p>


Ngswich

ng g c components/ngSwitch -is


<div [ngSwitch]="alerta">
  <div *ngSwitchCase="'success'">success</div>
  <div *ngSwitchCase="'info'">info</div>
  <div *ngSwitchCase="'warning'">warning</div>
  <div *ngSwitchDefault>danger</div>
</div>


<button (click)="alerta='success'" type="button" class="btn btn-default">
  Cambiar
</button>

Rutas y Rutas hijas

ng g c components/home -it -is
ng g c components/usuario/usuarioNuevo -is -it --flat     -->>> para que cree el componente en la mista carpeta del otro
ng g c components/usuario/usuarioEditar -is -it --flat
ng g c components/usuario/usuarioDetalle -is -it --flat


FORMULARIOS

2 tipos 
  - por template  (todo en html)
  - reactivos  (logica en ts)

ng g c pages/template --skipTests
ng g c pages/reactive --skipTests

en app.module.ts
import { FormsModule } from '@angular/forms';


en input class:

control con valor no cambiado
form-control ng-pristine ng-valid ng-touched

control con valor cambiado
form-control ng-valid ng-touched ng-dirty

<form autocomplete="off" (ngSubmit)="guardar(forma)" #forma="ngForm">

  guardar(forma: NgForm) {
    console.log(forma);
  }


ng g s services/pais --skipTest   

insertar un item a la primera posicion de un arreglo

        this.paises.unshift({
          nombre: '[ Seleccione pais]',
          codigo: ''
        });


tener en cuenta que para usar el ngModel en un control se necesita tener el name en el control        


FORMULARIOS reactivos

validaciones del lado del .ts, mayor control sobre el FORMULARIOS

    this.fb.group({
      nombre: ['']          ---> [''] -> valor por defecto, ['',[]]  --> validaciones sincronas,  --> ['',[],[]] --> validaciones asyncronas
    });


---- para ver codigo del FORMULARIOS

<hr>
<pre>
  Estado del formulario {{ forma.valid }}
  <br>
  Status: {{forma.status}}
</pre>

<pre>
  {{forma.value | json}}
</pre>


para el color rojo
una forma


        <input class="form-control" type="text" placeholder="Nombre" formControlName="nombre"
          [class.is-invalid]="forma.get('nombre').invalid && forma.get('nombre').touched">


Validaciones personalizadas
crear servicio:
ng g s services/validadores --skipTests

ctrl + space        ---> mostrar ayuda


-------------------------- App de CRUD

generar archivo de rutas:

ng g m appRouting --flat

ng g c pages/heroe
ng g c pages/heroes


fontawesome
<script src="https://kit.fontawesome.com/e34f9e7823.js" crossorigin="anonymous"></script>
animate.css

https://animate.style/#usage

proyecto en firebase

http://firebase.google.com/

https://login-app-1e2ce.firebaseio.com/heroes.json

ng g s services/heroes


crear un objeto diferente y romper la referencia

    const heroeTemp = {
      ...heroe
    };

// eliminar propiedad id
    delete heroeTemp.id;


para alertas al usuario
sweetAlert2

https://sweetalert2.github.io/

npm install sweetalert2


FIRECHAT

crear proyecto en 
https://console.firebase.google.com/

intalar bootsptrap

instalar libreria angularfire2

npm install angularfire2 firebase --save

ng g c components/chat -is --spec=false
ng g s providers/chat --spec=false

Login con google y Twitter
ng g c components/login -is --spec=false


AUTHENTICACION CON AUTH0 

ng g c components/navbar -is --skipTests

npm install @auth0/auth0-spa-js --save

ctl + p   escribir @      para ver todas las propiedades y metodos de un archivo

ng g c components/callback --skipTests

CREAR GUARD
ng g guard services/auth --skipTests


LOGIN PROPIO  07-bonus-loginApp
https://firebase.google.com/

https://firebase.google.com/docs/reference/rest/auth#section-create-email-password


ng g s services/auth

    // const authData = {
    //   email: usuario.email,
    //   password: usuario.password,
    //   returnSecureToken: true
    // };

    // es lo mismo que
    const authData = {
      ...usuario,
      returnSecureToken: true
    };


sweetalert2
https://sweetalert2.github.io/

npm install sweetalert2

Guard para prevenir ingreso a paginas no autenticadas
ng g guard guards/auth


peliculas App
JsonP.      --> para descargar un json deuna url



ng g s services/peliculas --skipTests

private apiKey = '866baac4f7b722ab78622911fe683e61';

ng g c components/navbar -is
ng g c components/home -is
ng g c components/pelicula -is
ng g c components/buscar -is
ng g p pipes/peliculaImagen

ng g c components/home/galeria -is --flat       flat para que no cree carpeta


--------MAPAS
ng new mapas
ng add @angular/material

// Crear un nuevo archivo de modulo.  (para modulos de material)
ng g module material --flat


ng g c components/mapa  --module=app.module --spec=false    --- adiciona componente a un modulo especifico (cuando se tienen varios)

angular maps  https://angular-maps.com/

npm install @agm/core --save

get apikey from google 
https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en#key

AIzaSyC6fBqNJ5Vlab-120VhAWkqYON7icOKwjw

npm cache clean --force 

ng g c components/mapa/mapa-editar --flat --spec=false --module=app.module


App de youtube

https://developers.google.com/youtube/v3/docs

Canal 
https://www.youtube.com/channel/UCuaPTYj15JSkETGnEseaFFg


ng g c components/navbar --skipTests
ng g c pages/home --skipTests
ng g s services/youtube

AIzaSyCYwP3EG-xionykHcRFXAznexHifl40m-U
UCuaPTYj15JSkETGnEseaFFg

uploads = playlist
UUuaPTYj15JSkETGnEseaFFg

https://quicktype.io/          para convertir un json en un modelo / clase
https://app.quicktype.io/

f2    -> cambiar nombre y referencias 

this.videos.push(...resp);  --> para  dicionar el arreglo resp a this.videos

npm install sweetalert2@8.11.6 

14-Despliegue
Subir a producción

generar carpeta dist   --> para preproduccion 
ng build

montar rapidamente un servidor de node
https://www.npmjs.com/package/http-server

npm install --global http-server

cd dist/Despliegue

http-server -o              ----> servidor de node

http://127.0.0.1:8080/


a produccion 

en environments/environment.ts:
export const environment = {
  production: true
};

ng build --prod

guia de estilos
https://angular.io/guide/styleguide

angular cli
https://cli.angular.io/reference.pdf

typescript
https://www.typescriptlang.org/docs/handbook/basic-types.html


tutorial
https://angular.io/tutorial


Firabase Storage

ng g c components/fotos --spec=false -is
ng g c components/carga --spec=false -is


